@mixin background-size($width: 100%, $height: 100%) {
	-o-background-size: $width, $height;
	-webkit-background-size: $width, $height;
	-moz-background-size: $width, $height;
	background-size: $width, $height;
}

// mixin box-sizing удобнее
@mixin border-box {
	-ms-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

// now unneeded
@mixin border-radius($value) {
	-webkit-border-radius: $value;
	-moz-border-radius: $value;
	border-radius: $value;

	 /* useful if you don't want a bg color from leaking outside the border: */
	-webkit-background-clip: padding-box;
	-moz-background-clip: padding;
	background-clip: padding-box;
}

// now unneeded
@mixin box-shadow($value1, $value2: 0) {
	@if $value2 != 0 {
		-webkit-box-shadow: $value1, $value2;
		-moz-box-shadow: $value1, $value2;
		box-shadow: $value1, $value2;
	}
	@else {
		-webkit-box-shadow: $value1;
		-moz-box-shadow: $value1;
		box-shadow: $value1;
	}
}

@mixin box-sizing($box-sizing: border-box) {
	-ms-box-sizing: $box-sizing;
	-webkit-box-sizing: $box-sizing;
	-moz-box-sizing: $box-sizing;
	box-sizing: $box-sizing;
}

@mixin cf {
	&:before,
	&:after {
		display: table;
		content: "";
	}

	&:after {
		clear: both;
	}
}

@mixin cf-undo {
	&:before,
	&:after {
		display: none;
	}

	&:after {
		clear: none;
	}
}

@mixin gradient-h( $color-start:rgba(255,255,255,1), $color-end:rgba(0,0,0,1)) {
	//-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$color-start}, endColorstr=#{$color-end}, GradientType=1)";
	//filter: progid:DXImageTransform.Microsoft.gradient(startColorStr=#{$color-start}, EndColorStr=#{$color-end}, GradientType=1);
	//background-image: -ms-linear-gradient(left, $color-start, $color-end);
	background-image: -webkit-gradient(linear, left top, right top, from($color-start), to($color-end));
	background-image: -webkit-linear-gradient(left, $color-start, $color-end);
	background-image: -moz-linear-gradient(left, $color-start, $color-end);
	background-image: -o-linear-gradient(left, $color-start, $color-end);
	background-image: -ms-linear-gradient(left, $color-start, $color-end);
	background-image: linear-gradient(left, $color-start, $color-end);
}

@mixin gradient-v( $color-start:rgba(255,255,255,1), $color-end:rgba(0,0,0,1)) {
	background-image: -webkit-gradient(linear, left top, left bottom, from($color-start), to($color-end));
	background-image: -webkit-linear-gradient(top, $color-start, $color-end);
	background-image: -moz-linear-gradient(top, $color-start, $color-end);
	background-image: -o-linear-gradient(top, $color-start, $color-end);
	background-image: -ms-linear-gradient(top, $color-start, $color-end);
	background-image: linear-gradient(top, $color-start, $color-end);
	// -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$color-start}', EndColorStr='#{$color-end}')";
}

// Для спрайтов, через указание позиции иконки
@mixin icon-s($x: 1, $y: 1, $width: null, $height: null, $offset-x: 0, $offset-y: 0) {
	background: url("#{$imagesPath}/icons.png") $x * -60 + 60 + $offset-x + px  -400 + $y * -60 + 60 + $offset-y + px no-repeat transparent;
	@if $width != null {
		@if unit($width) == "" {
			$width: $width + px;
		}
		width: $width;
	}
	@if $height != null {
		@if unit($height) == "" {
			$height: $height + px;
		}
		height: $height;
	}
}

@mixin link($color:$link-color-common, $color-hover:$link-hover-color-common, $element:'&') {
	text-decoration: none;
	cursor: pointer;

	&, &:link, &:visited {
		#{$element} {
			color: $color;
			border-bottom: 1px solid adjust-color($color, $saturation: -40%, $lightness: 32%);
		}
	}

	&:hover, &:focus {
		#{$element} {
			border-bottom: 1px solid adjust-color($color-hover, $saturation: -22%, $lightness: 32%);
			color: $color-hover;
		}
	}
}


@mixin link-dotted($color:$link-color-common, $color-hover:$link-hover-color-common, $element:'&') {
	text-decoration: none;
	cursor: pointer;

	&, &:link, &:visited {
		#{$element} {
			color: $color;
			border-bottom: 1px dotted $color;
		}
	}

	&:hover, &:focus {
		#{$element} {
			border-bottom: 1px dotted $color-hover;
			color: $color-hover;
		}
	}
}

@mixin link-dotted-mono($color:$link-color-common, $element:'&') {
	text-decoration: none;
	cursor: pointer;
	
	&, &:visited {
		#{$element} {
			color: $color;
			border-bottom: 1px dotted $color;
		}
	}

	&:hover, &:focus {
		#{$element} {
			border-bottom: 0;
			color: $color;
		}
	}
}

@mixin link-mono($color:$link-color-common, $element:'&') {
	text-decoration: none;
	cursor: pointer;

	&, &:link, &:visited {
		#{$element} {
			color: $color;
			border-bottom: 1px solid adjust-color($color, $saturation: -40%, $lightness: 32%);
		}
	}

	&:hover, &:focus {
		#{$element} {
			color: $color;
			border-bottom: 0;
		}
	}
}


@mixin no-appear {
	-webkit-appearance: none;
	-moz-appearance: none;
	-ms-appearance: none;
	-o-appearance: none;
	appearance: none;
}

// Для упрощения доступа к media query
@mixin on-res($ltgt, $vw) {
	$extrema: null;

	@if $ltgt == lt {
		$extrema: max;
	}
	@if $ltgt == gt {
		$extrema: min;
	}

	@if $vw == 10 {
		$vw: $mq1024-1280;
	}
	@if $vw == 9 {
		$vw: $mq1024;
	}

	@media all and (#{$extrema}-width: $vw) {
		@content;
	}
}

@mixin opacity($opacity) {
	-moz-opacity: $opacity; // Mozilla 1.6
	-khtml-opacity: $opacity; // Konqueror 3.1, Safari 1.1
	opacity: $opacity; // CSS3 - Mozilla 1.7b +, Firefox 0.9 +, Safari 1.2+, Opera 9
}

// Используется, если нет картинок на bg
@mixin opacity-ie($opacity) {
	-moz-opacity: $opacity; // Mozilla 1.6
	-khtml-opacity: $opacity; // Konqueror 3.1, Safari 1.1
	opacity: $opacity; // CSS3 - Mozilla 1.7b +, Firefox 0.9 +, Safari 1.2+, Opera 9
	filter: alpha(opacity=$opacity*100);
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity*100})";
	filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity*100});
}

@mixin placeholder($color: #8c8c8c) {
	&::-webkit-input-placeholder {
		color: $color;
	}

	&::-moz-placeholder {/* Firefox 19+ */
		color: $color;
	}

	&:-ms-input-placeholder {
		color: $color;
	}
}

// Для псевдоэлемента дефолтные стили
@mixin p-block($content:"") {
	display: block;
	content: $content;
	position: absolute;
}

@mixin rotate($deg) {
	-moz-transform: rotate(#{$deg}deg) translateX(0px) scale(1);
	-o-transform: rotate(#{$deg}deg) translateX(0px) scale(1);
	-webkit-transform: rotate(#{$deg}deg) translateX(0px) scale(1);
	transform: rotate(#{$deg}deg) translateX(0px) scale(1);
}

@mixin text-ellipsis {
	overflow: hidden;
	-o-text-overflow: ellipsis;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin text-shadow ($value) {
	-webkit-text-shadow: $value;
	-moz-text-shadow: $value;
	text-shadow: $value;
}

@mixin transition( $duration:400, $property:background-color ) {
	-o-transition-property: $property;
	-webkit-transition: $property #{$duration}ms;
	-moz-transition: $property #{$duration}ms;
	-o-transition-duration: #{$duration}ms;
	transition: $property #{$duration}ms;
}

@mixin user-select($user-select: none){
	-ms-user-select: $user-select;
	-webkit-user-select: $user-select;
	-moz-user-select: $user-select;
	user-select: $user-select;
}





@mixin icon($name) {
	background: url('/static/img/Public/icon-#{$name}.png') no-repeat;	
}